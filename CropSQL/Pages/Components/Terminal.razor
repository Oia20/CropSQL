@inject IJSRuntime JSRuntime
<div class="whole-drop">
    <button class="dropdown-butn" @onclick="ToggleDropdown">Prompt @termNum <span class="dropdown-icon">&#9660;</span></button>
    @if (isDropdownVisible)
    {
        <ul @onclick="ToggleDropdown">
            <li @onclick="@(async () => await ChangeStage(1))"><a>1. Create Farm</a></li>
            <li @onclick="@(async () => await ChangeStage(2))"><a>2. Use DB</a></li>
            <li @onclick="@(async () => await ChangeStage(3))"><a>3. Create Table</a></li>
            <li @onclick="@(async () => await ChangeStage(4))"><a>4. Alter Table</a></li>
        </ul>
    }
</div>
<div class="container123">
<div class="sidebar">
    <ul>
        <li @onclick="@(async () => await ChangeStage(1))"><a>1. Create Farm</a></li>
        <li @onclick="@(async () => await ChangeStage(2))"><a>2. Use DB</a></li>
        <li @onclick="@(async () => await ChangeStage(3))"><a>3. Create Table</a></li>
        <li @onclick="@(async () => await ChangeStage(4))"><a>4. Alter Table</a></li>
    </ul>
</div>
<div class="container1234">
<div class="terminal">
    <h2 class="">CropSQL Terminal</h2>

<div class="output" @ref="outputRef">
    @{
        // starting index for past terminal commands.
        int startIndex = Math.Max(0, terminalOutput.Count - 10);
    }
    @for (int i = startIndex; i < terminalOutput.Count; i++)
    {
        <div class="outText">@terminalOutput[i]</div>
    }
</div>
    <input type="text" @ref="inputRef" placeholder="Add Commands Here" @bind="currentInput" @onkeydown="HandleInput"/> 
    <button @onclick="ButtonClicked" class="exec-but" >Execute</button>
</div>
<div class="prompt">
    <h2>Prompt</h2>

    <p>@prompt[termNum - 1]</p>
    <h3>Example:</h3>
    <div class="exampleCode">
        @foreach (string lines in codeSample[termNum - 1])
        {
            <p class="code-line">@string.Join(" ", lines)</p>
        }
    </div>
    </div>
</div>

</div>
@code {
    private List<string> terminalOutput = new List<string>(["CropSQL> Hello! Enter commands below."]);
    private List<string> currentCommand = new List<string>([]);

    private string currentInput = "";

    
    private bool completed = false;
    private int termNum = 1;
    private ElementReference outputRef;
    private ElementReference inputRef;
    bool isDropdownVisible = false;

    void ToggleDropdown()
    {
        isDropdownVisible = !isDropdownVisible;
    }
    private void ButtonClicked() {
        AddCommand(currentInput);
        currentInput = ""; // Clear the input field
    }

    private async Task HandleInput(KeyboardEventArgs e)
    {
        if (e.Key == "Enter")
        {
            // Get the value of the input field using JavaScript interop
            currentInput = await JSRuntime.InvokeAsync<string>("getInputValue", inputRef);
            await JSRuntime.InvokeAsync<string>("clearInput", inputRef);
            AddCommand(currentInput);
            currentInput = "";
        }
    }

    private Task ChangeStage(int stepNum) {
        termNum = stepNum;
        return Task.CompletedTask;
    }
    private void AddCommand(string command) {
        Console.WriteLine("hello");
        StateHasChanged();
        if (command.Length > 0) {
            string last = command[command.Length - 1].ToString();
            terminalOutput.Add("CropSQL> " + command);
            currentCommand.Add(command);
            if (last == ";") {
                ExecuteCommand();
                currentCommand.Clear();
            }
        }

    }
        private List<string> prompt = new List<string>([
        "Let's start by creating your farm with 'CREATE DATABASE' followed by the name of our farm followed by a semi-colon don't forget the semi-colon, this is how sql knows where your command ends.",
        "We need to tell SQL which Database we are using, do this by saying 'USE' followed by our farm name.",
        "You need a table to store the crops in your field. Create a table with 'CREATE TABLE' followed by the table name, we will name ours 'crops' then open a parentheses '('inside of your table you can specify columns, and what datatype goes into them. This will make more sense later in the game, but for now, lets create a column named Crop with a data type of varchar(20) which is a word with a max of 20 characters. Then an Amount column which takes and int, and a Word column which also takes an int.",
        "Oops, it looks like we forgot to add a column for how much our Crops are worth! Not to worry, SQL gives us a command for that. 'ALTER TABLE tableName' followed by ADD columnName datatype"
        ]);
    private List<string[]> codeSample = new List<string[]>
    {
        new string[] { "CREATE DATABASE sqland;" },
        new string[] { "USE sqland;" },
        new string[] { "CREATE TABLE crops (", "crop varchar(20),", "amount int;", ");"},
        new string[] { "ALTER TABLE crops", "ADD worth int;" }
    };
    private void ExecuteCommand()
    {
        // Process command here
        currentCommand.RemoveAll(string.IsNullOrEmpty);
        currentCommand.ForEach(Console.WriteLine);
        currentCommand = currentCommand.SelectMany(command => command.Split(" ")).ToList();
        currentCommand.ForEach(Console.WriteLine);

        switch (termNum) {
            case 1:
                if (currentCommand.Count > 2 && currentCommand[0].ToUpper().Contains("CREATE") && currentCommand[1].ToUpper().Contains("DATABASE") && currentCommand.Count <= 4) {
                    terminalOutput.Add("CropSQL> You've got it! DB created.");
                    termNum++;
                } else {
                    terminalOutput.Add("CropSQL> Incorrect Command");
                }
                break;
            case 2:
                break;
            case 3:
            break;
            case 4:

            break;
        }
        StateHasChanged();
    }
}
