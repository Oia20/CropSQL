@inject IJSRuntime JSRuntime
<button class="dropdown-butn"></button>
<div class="container123">
<div class="sidebar">
    <ul>
        <li @onclick="@(async () => await ChangeStage(1))"><a>1. Create Farm</a></li>
        <li @onclick="@(async () => await ChangeStage(2))"><a>2. Use DB</a></li>
        <li><a>3. Create Table</a></li>
        <li><a>4. Contact</a></li>
    </ul>
</div>
<div class="container1234">
<div class="terminal">
    <h2 class="">CropSQL Terminal</h2>

<div class="output" @ref="outputRef">
    @{
        // starting index for past terminal commands.
        int startIndex = Math.Max(0, terminalOutput.Count - 10);
    }
    @for (int i = startIndex; i < terminalOutput.Count; i++)
    {
        <div class="outText">@terminalOutput[i]</div>
    }
</div>
    <input type="text" @ref="inputRef" placeholder="CropSQL> Add Commands Here" @bind="currentInput" @onkeydown="HandleInput"/> 
    <button @onclick="ButtonClicked" class="exec-but" >Execute</button>
</div>
<div class="prompt">
    <h2>Prompt</h2>

    <p>@prompt[termNum - 1]</p>
    <h3>Example:</h3>
    <div class="exampleCode">
        <p>@codeSample[termNum - 1]</p>
    </div>
    </div>
</div>

</div>
@code {
    private List<string> terminalOutput = new List<string>(["CropSQL> Hello! Enter the instructed command below."]);
    private string currentInput = "";
    private List<string> prompt = new List<string>([
        "Let's start by creating your farm with 'CREATE DATABASE' followed by the name of your farm followed by a semi-colon don't forget the semi-colon, this is how sql knows where your command ends.",
        "hellp"
        ]);
    private List<string> codeSample = new List<string>([
        "CREATE DATABASE myfarm;",
        "USE myfarm;"
        ]);
    
    private bool completed = false;
    private int termNum = 1;
    private ElementReference outputRef;
    private ElementReference inputRef;
    bool isSidebarOpen = false;

    void ToggleSidebar()
    {
        isSidebarOpen = !isSidebarOpen;
    }

    private void ButtonClicked() {
        ExecuteCommand(currentInput);
        currentInput = ""; // Clear the input field
    }

    private async Task HandleInput(KeyboardEventArgs e)
    {
        if (e.Key == "Enter")
        {
            // Get the value of the input field using JavaScript interop
            currentInput = await JSRuntime.InvokeAsync<string>("getInputValue", inputRef);

            ExecuteCommand(currentInput);
            currentInput = ""; // Clear the input field
        }
    }

    private Task ChangeStage(int stepNum) {
        termNum = stepNum;
        return Task.CompletedTask;
    }

    private void ExecuteCommand(string command)
    {
        // Process command here
        terminalOutput.Add("CropSQL> " + command);
        string[] words = command.Split(' ');
        Console.WriteLine(command);
        Console.WriteLine(words);

        switch (termNum) {
            case 1:
                if ( words.Length > 0 && words[0] == "CREATE" && words[1] == "DATABASE" && words.Length == 3) {
                    string last = command[command.Length - 1].ToString();
                    if (last == ";") {
                        Console.WriteLine("CREATED");
                        terminalOutput.Add("Challenge passed, DB created.");
                        termNum++;
                    }
                }
                break;
            case 2:
                if ( words.Length > 0 && words[0] == "USE" && words.Length == 2) {
                    string last = command[command.Length - 1].ToString();
                    if (last == ";") {
                        Console.WriteLine("CREATED");
                        terminalOutput.Add("Challenge passed, Using DB");
                        termNum++;
                    }
                }
                break;
            
        }
        StateHasChanged();
    }
}
