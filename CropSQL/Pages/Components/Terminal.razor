@inject IJSRuntime JSRuntime

<div class="terminal">
<div class="output" @ref="outputRef">
    @{
        // Determine the starting index for the loop
        int startIndex = Math.Max(0, terminalOutput.Count - 10);
    }
    @for (int i = startIndex; i < terminalOutput.Count; i++)
    {
        <div class="outText">@terminalOutput[i]</div>
    }
</div>
    <input type="text" @ref="inputRef" placeholder="CropSQL> Add Commands Here" @bind="currentInput" @onkeydown="HandleInput"/> 
</div>

@code {
    private List<string> terminalOutput = new List<string>();
    private string currentInput = "";

    private ElementReference outputRef;
    private ElementReference inputRef;

    private async Task HandleInput(KeyboardEventArgs e)
    {
        if (e.Key == "Enter")
        {
            // Get the value of the input field using JavaScript interop
            currentInput = await JSRuntime.InvokeAsync<string>("getInputValue", inputRef);

            ExecuteCommand(currentInput);
            currentInput = ""; // Clear the input field
        }
    }

    private void ExecuteCommand(string command)
    {
        // Process command here
        // For demonstration purposes, just echo back the command
        terminalOutput.Add("CropSQL> " + command);

        // Notify Blazor that the component's state has changed
        StateHasChanged();
    }
}
