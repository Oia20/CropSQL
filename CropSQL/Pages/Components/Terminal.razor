@inject IJSRuntime JSRuntime

<div class="terminal">
    <h2 class="">CropSQL Terminal</h2>

<div class="output" @ref="outputRef">
    @{
        // Determine the starting index for the loop
        int startIndex = Math.Max(0, terminalOutput.Count - 10);
    }
    @for (int i = startIndex; i < terminalOutput.Count; i++)
    {
        <div class="outText">@terminalOutput[i]</div>
    }
</div>
    <input type="text" @ref="inputRef" placeholder="CropSQL> Add Commands Here" @bind="currentInput" @onkeydown="HandleInput"/> 
    <button @onclick="ButtonClicked" class="exec-but" >Execute</button>
</div>
<div class="prompt">
    <h2>Prompt</h2>

    <p>@prompt</p>
    <h3>Example:</h3>
    <div class="exampleCode">
        <p>@codeSample</p>
    </div>
</div>


@code {
    private List<string> terminalOutput = new List<string>(["CropSQL> Hello! Enter the instructed command below."]);
    private string currentInput = "";
    private bool completed = false;
    private int termNum = 1;
    private ElementReference outputRef;
    public string prompt ="";
    public string codeSample = "";

    private ElementReference inputRef;
    private void ButtonClicked() {
        ExecuteCommand(currentInput);
        currentInput = ""; // Clear the input field
    }
    private async Task HandleInput(KeyboardEventArgs e)
    {
        if (e.Key == "Enter")
        {
            // Get the value of the input field using JavaScript interop
            currentInput = await JSRuntime.InvokeAsync<string>("getInputValue", inputRef);

            ExecuteCommand(currentInput);
            currentInput = ""; // Clear the input field
        }
    }

    private void ExecuteCommand(string command)
    {
        // Process command here
        // For demonstration purposes, just echo back the command
        terminalOutput.Add("CropSQL> " + command);
        // Split the string at every space
        string[] words = command.Split(' ');
                // Your remaining logic here...
        Console.WriteLine(command);
        Console.WriteLine(words);

        switch (termNum) {
            case 1:
                prompt =  "public string prompt";
                codeSample =  "public string prompt";

                if ( words.Length > 0 && words[0] == "CREATE" && words[1] == "DATABASE" && words.Length == 3) {
                    string last = command[command.Length - 1].ToString();
                    if (last == ";") {
                        Console.WriteLine("CREATED");
                        terminalOutput.Add("Challenge passed, DB created.");
                        termNum++;
                    }
                }
                break;
            case 2:
                 prompt =  "publictyjyjft string prompt";
                codeSample =  "publictfjftjtj string prompt";
                if ( words.Length > 0 && words[0] == "USE" && words.Length == 2) {
                    string last = command[command.Length - 1].ToString();
                    if (last == ";") {
                        Console.WriteLine("CREATED");
                        terminalOutput.Add("Challenge passed, Using DB");
                        termNum++;
                    }
                }
                break;
            
        }
        // Notify Blazor that the component's state has changed
        StateHasChanged();
    }
}
