@inject IJSRuntime JSRuntime
<div class="whole-drop">
    <button class="dropdown-butn" @onclick="ToggleDropdown">Prompt @termNum <span class="dropdown-icon">&#9660;</span></button>
    @if (isDropdownVisible)
    {
        <ul @onclick="ToggleDropdown">
            <li @onclick="@(async () => await ChangeStage(1))"><a>1. Create Farm</a></li>
            <li @onclick="@(async () => await ChangeStage(2))"><a>2. Use DB</a></li>
            <li @onclick="@(async () => await ChangeStage(3))"><a>3. Create Table</a></li>
            <li @onclick="@(async () => await ChangeStage(4))"><a>4. Alter Table</a></li>
            <li @onclick="@(async () => await ChangeStage(5))"><a>5. Describe Table</a></li>
            <li @onclick="@(async () => await ChangeStage(6))"><a>6. Insert Into</a></li>
            <li @onclick="@(async () => await ChangeStage(7))"><a>7. Select *</a></li>
            <li @onclick="@(async () => await ChangeStage(8))"><a>8. Alter Again</a></li>
            <li @onclick="@(async () => await ChangeStage(9))"><a>9. Create Table 2</a></li>
            <li @onclick="@(async () => await ChangeStage(10))"><a>10. Update, Set</a></li>
            <li @onclick="@(async () => await ChangeStage(11))"><a>11. Insert Into 2</a></li>
            <li @onclick="@(async () => await ChangeStage(12))"><a>12. Select *</a></li>
            <li @onclick="@(async () => await ChangeStage(13))"><a>13. Select *</a></li>
            <li @onclick="@(async () => await ChangeStage(14))"><a>14. Select *</a></li>
            <li @onclick="@(async () => await ChangeStage(15))"><a>15. Select *</a></li>


        </ul>
    }
</div>
<div class="container123">
<div class="sidebar">
    <ul>
        <li @onclick="@(async () => await ChangeStage(1))"><a>1. Create Farm</a></li>
        <li @onclick="@(async () => await ChangeStage(2))"><a>2. Use DB</a></li>
        <li @onclick="@(async () => await ChangeStage(3))"><a>3. Create Table</a></li>
        <li @onclick="@(async () => await ChangeStage(4))"><a>4. Alter Table</a></li>
        <li @onclick="@(async () => await ChangeStage(5))"><a>5. Describe Table</a></li>
        <li @onclick="@(async () => await ChangeStage(6))"><a>6. Insert Into </a></li>
        <li @onclick="@(async () => await ChangeStage(7))"><a>7. Select *</a></li>
        <li @onclick="@(async () => await ChangeStage(8))"><a>8. Alter Again</a></li>
        <li @onclick="@(async () => await ChangeStage(9))"><a>9. Create Table2</a></li>
        <li @onclick="@(async () => await ChangeStage(10))"><a>10. Update, Set</a></li>
        <li @onclick="@(async () => await ChangeStage(11))"><a>11. Insert Into 2</a></li>
        <li @onclick="@(async () => await ChangeStage(12))"><a>12. Select *</a></li>
        <li @onclick="@(async () => await ChangeStage(13))"><a>13. Select *</a></li>
        <li @onclick="@(async () => await ChangeStage(14))"><a>14. Select *</a></li>
        <li @onclick="@(async () => await ChangeStage(15))"><a>15. Select *</a></li>


    </ul>
</div>
<div class="container1234">
<div class="terminal">
    <h2 class="">CropSQL Terminal</h2>

<div class="output" @ref="outputRef">
    @{
        // starting index for past terminal commands.
        int startIndex = Math.Max(0, terminalOutput.Count - 10);
    }
    @for (int i = startIndex; i < terminalOutput.Count; i++)
    {
        <div class="outText">@terminalOutput[i]</div>
    }
</div>
    <input type="text" @ref="inputRef" placeholder="Add Commands Here" @bind="currentInput" @onkeydown="HandleInput"/> 
    <button @onclick="ButtonClicked" class="exec-but" >Execute</button>
</div>
<div class="prompt">
    <h2>Prompt</h2>

    <p>@prompt[termNum - 1]</p>
    <div class="flex-row">
    <h3>Example:</h3>
    <button class="copy-button" @onclick="CopyToClipboard">
        <span>Copy Code</span>
        <!-- You can use an icon here if you prefer -->
        <!-- Example: <i class="fas fa-copy"></i> -->
    </button>
    </div>
    <div class="exampleCode" @onclick="CopyToClipboard">

        @foreach (string lines in codeSample[termNum - 1])
        {
            <p class="code-line">@string.Join(" ", lines)</p>
        }

    </div>
    </div>
</div>

</div>
@code {
    private List<string> terminalOutput = new List<string>(["CropSQL> Hello! Enter commands below."]);
    private List<string> currentCommand = new List<string>([]);

    private string currentInput = "";

    
    private bool completed = false;
    private int termNum = 1;
    private ElementReference outputRef;
    private ElementReference inputRef;
    bool isDropdownVisible = false;

    void ToggleDropdown()
    {
        isDropdownVisible = !isDropdownVisible;
    }
    private async Task CopyToClipboard()
    {
        var codeContent = string.Join("\n", codeSample[termNum - 1]);
        await JSRuntime.InvokeVoidAsync("copyToClipboard", codeContent);
    }
    private void ButtonClicked() {
        AddCommand(currentInput);
        currentInput = ""; // Clear the input field
    }

    private async Task HandleInput(KeyboardEventArgs e)
    {
        if (e.Key == "Enter")
        {
            // Get the value of the input field using JavaScript interop
            currentInput = await JSRuntime.InvokeAsync<string>("getInputValue", inputRef);
            await JSRuntime.InvokeAsync<string>("clearInput", inputRef);
            AddCommand(currentInput);
            currentInput = "";
        }
    }

    private Task ChangeStage(int stepNum) {
        termNum = stepNum;
        return Task.CompletedTask;
    }
    private void AddCommand(string command) {
        Console.WriteLine("hello");
        StateHasChanged();
        if (command.Length > 0) {
            string last = command[command.Length - 1].ToString();
            terminalOutput.Add("CropSQL> " + command);
            currentCommand.Add(command);
            if (last == ";") {
                ExecuteCommand();
                currentCommand.Clear();
            }
        }

    }
        private List<string> prompt = new List<string>([
        "Let's start by creating your farm with 'CREATE DATABASE' followed by the name of our farm, lets name ours 'sqland', followed by a semi-colon don't forget the semi-colon, this is how sql knows where your command ends.",
        "We need to tell SQL which Database we are using, do this by saying 'USE' followed by our farm name.",
        "You need a table to store the crops in your field. Create a table with 'CREATE TABLE' followed by the table name, we will name ours 'crops' then open a parentheses '('inside of your table you can specify columns, and what datatype goes into them. This will make more sense later in the game, but for now, lets create a column named Crop with a data type of varchar(20) which is a word with a max of 20 characters. Then an Amount column which takes and int, and a Word column which also takes an int.",
        "Oops, it looks like we forgot to add a column for how much our Crops are worth! Not to worry, SQL gives us a command for that. 'ALTER TABLE tableName' followed by ADD columnName datatype",
        "Now lets look at our table! We do this with 'DESCRIBE' followed by the tables name",
        "Next it's time that we plant some crops. Let's start with the worst one of all, Carrots! in SQL we do this with the 'INSERT INTO' command followed by the table name. Then in parentheses we specify which columns we want to modify, in our case we want to modify all columns 'INSERT INTO Crops (Crop, Amount, Worth)' Then we use the 'VALUES ()' command to insert into columns Let's plant carrot, 5, 2. Planting 5 carrots at a worth of 2.",
        "Let's now view our planted crops! Do so with the 'SELECT' keyword, then a 'a' which means all columns, then 'FROM' lastly the name of the table;",
        "We want to add a column to our table for the product of amount * worth to figure out how much our crops are worth. We can do this with 'ALTER TABLE crops' then 'ADD total int;'",
        "Let's start preparing to sell our crops! first lets create a new table named sold, which takes a crop with datatype of varchar(20), and an int of total.",
        "Now let's calculate the total value of our crops with the 'UPDATE' command, followed by the table name. Then use the 'SET command followed by the column you want to alter (total) set to = the product of the amount and worth columns'",
        "It's time that we sell our crops! Let's insert from our crops column into our sold column.",
        "Hello",
        "Hello",
        "Hello",
        "Hello",
        "Hello",


        ]);
    private List<string[]> codeSample = new List<string[]>
    {
        new string[] { "CREATE DATABASE sqland;" },
        new string[] { "USE sqland;" },
        new string[] { "CREATE TABLE crops (", "crop varchar(20),", "amount int", ");"},
        new string[] { "ALTER TABLE crops", "ADD worth int;" },
        new string[] { "DESCRIBE crops;"},
        new string[] { "INSERT INTO crops (crop, amount, worth)", "VALUES ('carrot', 5, 2);" },
        new string[] { "SELECT * FROM crops;" },
        new string[] { "ALTER TABLE crops", "ADD total int;" },
        new string[] { "CREATE TABLE sold (", "crop varchar(20),", "total int", ");" },
        new string[] { "UPDATE crops", "SET total = amount * worth;" },
        new string[] { "ALTER TABLE crops", "ADD worth int;" },
        new string[] { "ALTER TABLE crops", "ADD worth int;" },
        new string[] { "ALTER TABLE crops", "ADD worth int;" },
        new string[] { "ALTER TABLE crops", "ADD worth int;" },
        new string[] { "ALTER TABLE crops", "ADD worth int;" },
        new string[] { "ALTER TABLE crops", "ADD worth int;" },

    };
    private void ExecuteCommand()
    {
        // Process command here
        currentCommand.RemoveAll(string.IsNullOrEmpty);
        currentCommand.ForEach(Console.WriteLine);
        currentCommand = currentCommand.SelectMany(command => command.Split(" ")).ToList();
        currentCommand.ForEach(Console.WriteLine);
        currentCommand.RemoveAll(string.IsNullOrEmpty);


        switch (termNum) {
            case 1:
                if (currentCommand.Count > 2 && currentCommand[0].ToUpper().Contains("CREATE") && currentCommand[1].ToUpper().Contains("DATABASE") && currentCommand.Count <= 4) {
                    terminalOutput.Add("CropSQL> You've got it! DB Created.");
                    termNum++;
                } else {
                    terminalOutput.Add("CropSQL> Incorrect Command");
                }
                break;
            case 2:
                if (currentCommand.Count >= 2 && currentCommand.Count <= 3 && currentCommand[0].ToUpper().Contains("USE") && currentCommand[1].ToUpper().Contains("SQLAND")) {
                    terminalOutput.Add("CropSQL> Nice job! Now Using sqland DB.");
                    termNum++;
                } else {
                    terminalOutput.Add("CropSQL> Incorrect Command");
                }
                break;
            case 3:
                if (currentCommand[0].ToUpper().Contains("CREATE") && 
                    currentCommand[1].ToUpper().Contains("TABLE") && 
                    currentCommand[2].ToUpper().Contains("CROPS") &&
                    currentCommand.Any(s => s.ToUpper().Contains("VARCHAR")) &&
                    currentCommand.Any(s => s.ToUpper().Contains("AMOUNT")) &&
                    currentCommand.Any(s => s.ToUpper().Contains("INT")) &&
                    currentCommand.Any(s => s.ToUpper().Contains("20")) &&
                    currentCommand.Any(s => s.ToUpper().Contains(",")) &&
                    currentCommand.Any(s => s.ToUpper().Contains("("))

                    ) 
                {
                    terminalOutput.Add("CropSQL> You're on fire! 'crops' Table Created.");
                    termNum++;
                } 
                else 
                {
                    terminalOutput.Add("CropSQL> Incorrect Command");
                }
            break;
            case 4:
                if (currentCommand.Count > 5 &&
                    currentCommand[0].ToUpper() == "ALTER" &&
                    currentCommand[1].ToUpper() == "TABLE" && 
                    currentCommand[2].ToUpper() == "CROPS" &&
                    currentCommand[3].ToUpper() == "ADD" && 
                    currentCommand[4].ToUpper() == "WORTH" && 
                    currentCommand[5].ToUpper().Contains("INT")
                    )
                {
                    terminalOutput.Add("CropSQL> Anotha one! Column Added To Table!");
                    termNum++;
                } 
                else 
                {
                    terminalOutput.Add("CropSQL> Incorrect Command");
                }
            break;
            case 5:
                if (currentCommand.Count < 4 &&
                    currentCommand[0].ToUpper() == "DESCRIBE" &&
                    currentCommand[1].ToUpper().Contains("CROPS")
                )
                {
                    terminalOutput.Add("+--------+-------------+");
                    terminalOutput.Add("| Field--| Type--------|");
                    terminalOutput.Add("| crop---| varchar(20)-|");
                    terminalOutput.Add("| amount-| int---------|");
                    terminalOutput.Add("| worth--| int---------|");
                    terminalOutput.Add("+--------+-------------+");
                    terminalOutput.Add("CropSQL> Nice work! that's a good looking table!");
                    termNum++;
                } else 
                {
                    terminalOutput.Add("CropSQL> Incorrect Command");
                }
            break;

            case 6:
                if (currentCommand[0].ToUpper().Contains("INSERT") && 
                    currentCommand[1].ToUpper().Contains("INTO") && 
                    currentCommand[2].ToUpper().Contains("CROPS") &&
                    currentCommand.Any(s => s.ToUpper().Contains("WORTH")) &&
                    currentCommand.Any(s => s.ToUpper().Contains("AMOUNT")) &&
                    currentCommand.Any(s => s.ToUpper().Contains("CROP")) &&
                    currentCommand.Any(s => s.ToUpper().Contains("'CARROT'")) &&
                    currentCommand.Any(s => s.ToUpper().Contains(",")) &&
                    currentCommand.Any(s => s.ToUpper().Contains("VALUES")) &&
                    currentCommand.Any(s => s.ToUpper().Contains("5")) &&
                    currentCommand.Any(s => s.ToUpper().Contains("2")) &&
                    currentCommand.Any(s => s.ToUpper().Contains("("))
                    ) 
                {
                    terminalOutput.Add("CropSQL> You totally just planted those carrots!");
                    termNum++;
                } 
                else 
                {
                    terminalOutput.Add("CropSQL> Incorrect Command");
                }

            break;

            case 7:
                if (currentCommand.Count < 6 &&
                    currentCommand[0].ToUpper() == "SELECT" &&
                    currentCommand[1].ToUpper() == "*" &&
                    currentCommand[2].ToUpper() == "FROM" &&
                    currentCommand[3].ToUpper().Contains("CROPS")
                ) {
                    terminalOutput.Add("+------+------+-----+");
                    terminalOutput.Add("|crop--|amount|Worth|");
                    terminalOutput.Add("+------+------+-----+");
                    terminalOutput.Add("|carrot|-----5|----2|");
                    terminalOutput.Add("+--------+----------+");
                    terminalOutput.Add("CropSQL> Check out those crops!");
                    termNum++;
                }
                else 
                {
                    terminalOutput.Add("CropSQL> Incorrect Command");
                }
            break;

            case 8:
            if (currentCommand.Count > 5 &&
                    currentCommand[0].ToUpper() == "ALTER" &&
                    currentCommand[1].ToUpper() == "TABLE" && 
                    currentCommand[2].ToUpper() == "CROPS" &&
                    currentCommand[3].ToUpper() == "ADD" && 
                    currentCommand[4].ToUpper() == "TOTAL" && 
                    currentCommand[5].ToUpper().Contains("INT")
                    )
                {
                    terminalOutput.Add("CropSQL> Perfecto!");
                    termNum++;
                } 
                else 
                {
                    terminalOutput.Add("CropSQL> Incorrect Command");
                }

            break;

            case 9:
                if (currentCommand[0].ToUpper().Contains("CREATE") && 
                    currentCommand[1].ToUpper().Contains("TABLE") && 
                    currentCommand[2].ToUpper().Contains("SOLD") &&
                    currentCommand.Any(s => s.ToUpper().Contains("VARCHAR")) &&
                    currentCommand.Any(s => s.ToUpper().Contains("TOTAL")) &&
                    currentCommand.Any(s => s.ToUpper().Contains("INT")) &&
                    currentCommand.Any(s => s.ToUpper().Contains("20")) &&
                    currentCommand.Any(s => s.ToUpper().Contains(",")) &&
                    currentCommand.Any(s => s.ToUpper().Contains("("))

                    ) 
                {
                    terminalOutput.Add("CropSQL> Niceee! 'sold' table created.");
                    termNum++;
                } 
                else 
                {
                    terminalOutput.Add("CropSQL> Incorrect Command");
                }
            break;

            case 10:
                if (currentCommand[0].ToUpper().Contains("UPDATE") && 
                    currentCommand[1].ToUpper().Contains("CROPS") && 
                    currentCommand[2].ToUpper().Contains("SET") &&
                    currentCommand.Any(s => s.ToUpper().Contains("TOTAL")) &&
                    currentCommand.Any(s => s.ToUpper().Contains("AMOUNT")) &&
                    currentCommand.Any(s => s.ToUpper().Contains("*")) &&
                    currentCommand.Any(s => s.ToUpper().Contains("WORTH"))

                    ) 
                {
                    terminalOutput.Add("CropSQL> Very good! The crops table now has a total column which is set to be the product of worth and amount columns!");
                    termNum++;
                } 
                else 
                {
                    terminalOutput.Add("CropSQL> Incorrect Command");
                }
            break;

            case 11:

            break;

            case 12:

            break;

            case 13:

            break;

            case 14:

            break;

            case 15:

            break;
        }
        StateHasChanged();
    }
}
